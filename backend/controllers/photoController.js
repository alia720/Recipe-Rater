// controllers/photoController.js
import pool from '../db.js';
import fs from "fs";
import path from "path";
import {fileURLToPath} from 'url';
import multer from "multer";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const upLoadDir = path.join(__dirname, '..','uploads');

if(!fs.existsSync(upLoadDir)){
    fs.mkdirSync(upLoadDir, {recursive: true});
    console.log("Created uploads directory", upLoadDir);
}else {
    console.log("uploads directory already exists: ", upLoadDir);
}

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, upLoadDir); // Save files to the 'uploads' directory
    },
    filename: function (req, file, cb) {
        // Create a unique filename to avoid collisions
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});

// Multer instance with the storage configuration
export const upload = multer({
    storage: storage,
    limits: { fileSize: 10 * 1024 * 1024 }, // Optional: Limit file size (e.g., 10MB)
    fileFilter: function (req, file, cb) {
        // Optional: Filter file types
        const filetypes = /jpeg|jpg|png|gif|webp/;
        const mimetype = filetypes.test(file.mimetype);
        const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
        if (mimetype && extname) {
            return cb(null, true);
        }
        cb(new Error("Error: File upload only supports the following filetypes - " + filetypes));
    }
});
/**
 * Get all photos (with optional pagination).
 */
export const getAllPhotos = async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 10;
        const page = parseInt(req.query.page) || 1;
        const offset = (page - 1) * limit;

        const [rows] = await pool.query(
            'SELECT * FROM photo ORDER BY photo_id  LIMIT ? OFFSET ?',
            [limit, offset]
        );

        const [countResult] = await pool.query('SELECT COUNT(*) as count FROM photo');
        const totalItems = countResult[0].count;

        res.json({
            data: rows,
            pagination: {
                totalItems,
                currentPage: page,
                totalPages: Math.ceil(totalItems / limit),
            },
        });
    } catch (error) {
        console.error('Error fetching photos:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

/**
 * Get a single photo by ID.
 */
export const getPhotoById = async (req, res) => {
    const { id } = req.params;
    try {
        const [rows] = await pool.query('SELECT * FROM photo WHERE photo_id = ?', [id]);
        if (!rows.length) {
            return res.status(404).json({ error: 'Photo not found' });
        }
        res.json(rows[0]);
    } catch (error) {
        console.error('Error fetching photo by ID:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

/**
 * Get all photos for a specific recipe.
 */
export const getPhotosByRecipe = async (req, res) => {
    const { recipeId } = req.params;
    try {
      const [rows] = await pool.query(
        `SELECT 
          photo_id,
          CASE 
            WHEN name LIKE 'http%' THEN name
            ELSE CONCAT('http://localhost:5000/uploads/', name)
          END as url,
          caption,
          created_at
         FROM photo 
         WHERE recipe_id = ?`, 
        [recipeId]
      );
      res.json(rows);
    } catch (error) {
      console.error('Error fetching photos by recipe:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  };

/**
 * Search photos by name or caption (partial match).
 */
export const searchPhotos = async (req, res) => {
    const { query } = req.query;
    if (!query) {
        return res.status(400).json({ error: 'Query parameter is required.' });
    }

    try {
        const searchTerm = `%${query}%`;
        const [rows] = await pool.query(
            'SELECT * FROM photo WHERE name LIKE ? OR caption LIKE ?',
            [searchTerm, searchTerm]
        );
        res.json(rows);
    } catch (error) {
        console.error('Error searching photos:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

/**
 * Create a new photo record by uploading a file.
 * This function now handles file uploads via multer.
 */
export const createPhoto = async (req, res) => {
    if (!req.file) {
        return res.status(400).json({ error: 'No file was uploaded.' });
    }

    const { recipe_id, caption } = req.body; // Get recipe_id and caption from form data
    const filename = req.file.filename; // Use the filename generated by multer

    if (!recipe_id) {
        // If file was uploaded but recipe_id is missing, delete the orphaned file
        try {
            await fs.promises.unlink(req.file.path);
            console.log("Deleted orphaned file:", req.file.path);
        } catch (unlinkError) {
            console.error("Error deleting orphaned file:", unlinkError);
        }
        return res.status(400).json({ error: 'recipe_id is required with file upload.' });
    }

    try {
        const [result] = await pool.query(
            'INSERT INTO photo (recipe_id, name, caption) VALUES (?, ?, ?)',
            [recipe_id, filename, caption || null] // Store the actual saved filename
        );
        // Return details of the created photo, including the URL
        res.status(201).json({
            message: 'Photo uploaded and created successfully',
            photoId: result.insertId,
            filename: filename,
            url: `http://localhost:5000/uploads/${filename}` // Construct the URL
        });
    } catch (error) {
        console.error('Error creating photo record:', error);
        // Attempt to delete the uploaded file if database insert fails
        try {
            await fs.promises.unlink(req.file.path);
            console.log("Deleted file due to DB error:", req.file.path);
        } catch (unlinkError) {
            console.error("Error deleting file after DB error:", unlinkError);
        }
        res.status(500).json({ error: 'Database error while creating photo record.' });
    }
};

/**
 * Separate function to add a photo record from an external URL.
 */
export const addPhotoFromUrl = async (req, res) => {
    const { recipe_id, name, caption } = req.body; // 'name' here IS the URL

    if (!recipe_id || !name) {
        return res.status(400).json({ error: 'recipe_id and name (URL) are required.' });
    }

    // Basic validation: check if name looks like a URL
    if (!name.startsWith('https://') && !name.startsWith('https://')) {
        return res.status(400).json({ error: 'Invalid URL format provided in name field.' });
    }

    try {
        const [result] = await pool.query(
            'INSERT INTO photo (recipe_id, name, caption) VALUES (?, ?, ?)',
            [recipe_id, name, caption || null] // Store the full URL directly
        );
        res.status(201).json({
            message: 'Photo URL added successfully',
            photoId: result.insertId,
            url: name // The URL itself
        });
    } catch (error) {
        console.error('Error creating photo from URL:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};


/**
 * Update a photo record by ID.
 */
export const updatePhoto = async (req, res) => {
    const { id } = req.params;
    const { name, caption } = req.body;

    try {
        const [existing] = await pool.query('SELECT * FROM photo WHERE photo_id = ?', [id]);
        if (!existing.length) {
            return res.status(404).json({ error: 'Photo not found' });
        }

        const updatedName = name ?? existing[0].name;
        const updatedCaption = caption ?? existing[0].caption;

        await pool.query(
            'UPDATE photo SET name = ?, caption = ? WHERE photo_id = ?',
            [updatedName, updatedCaption, id]
        );
        res.json({ message: 'Photo updated successfully' });
    } catch (error) {
        console.error('Error updating photo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};

/**
 * Delete a photo by ID.
 */
export const deletePhoto = async (req, res) => {
    const { id } = req.params;
    try {
        const [existing] = await pool.query('SELECT * FROM photo WHERE photo_id = ?', [id]);
        if (!existing.length) {
            return res.status(404).json({ error: 'Photo not found' });
        }

        await pool.query('DELETE FROM photo WHERE photo_id = ?', [id]);
        res.json({ message: 'Photo deleted successfully' });
    } catch (error) {
        console.error('Error deleting photo:', error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
};
